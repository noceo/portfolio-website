{
  "title": "Solidiwise",
  "slug": "solidiwise",
  "description": "Expense Tracking on the Blockchain",
  "description_long": "I built an expense tracking app that runs on the Ethereum blockchain.",
  "responsibilities": "Planning, Development, Deployment",
  "project_goal": "Having built a proof of concept using the Truffle Framework, Ganache (a local test chain that emulates the EVM), and React. Writing unit tests for the smart contracts using the Mocha Test Framework and Metamask. Finally presenting the app and its functionality.",
  "accentColor": "rgba(40, 237, 234, 0.5)",
  "url": "https://drive.google.com/file/d/1KMTQBRV6Tjhnyqt7gwkfCLh2lGo2T8BS/view?usp=sharing",
  "thumbnail": {
    "src": "/images/solidiwise_add_expense.jpg",
    "alt": "A screenshot of the UI used to add an expense to your expense list"
  },
  "circleStyle": {
    "xs": {
      "top": "40%",
      "left": "100%",
      "width": "70vw",
      "height": "70vw"
    },
    "xl": {
      "top": "10%",
      "left": "100%",
      "width": "70vw",
      "height": "70vw"
    }
  },
  "components": [
    {
      "type": "SingleColumnLayout",
      "children": [
        {
          "type": "Text",
          "text": [
            "I have been using the expense tracking app Splitwise for a long time now. It makes it easy to track expenses in a group setting. If you spend money on behalf of someone you know, you can simply put all expenses in the app and it automatically tracks how much money other people owe you or vice versa. Taking a Blockchain Technologies class I wanted to build a clone of that app using the Ethereum blockchain. That way users do not have to register with any usernames and passwords but rather use their wallet address to become part of a group. The group allows to save, update, and delete expenses and also keeps track of the total amount each group member owes the other members. I wrote two smart contracts to achieve this behavior. Everyone with a valid wallet address can create a group and invite other people using their addresses."
          ],
          "classes": "col-lg-10 offset-lg-1"
        },
        {
          "type": "Image",
          "src": "/images/solidiwise_add_expense.jpg",
          "alt": "A screenshot of the UI used to add an expense to your expense list",
          "caption": "A screenshot of the UI used to add an expense to your expense list"
        },
        {
          "type": "Text",
          "text": "Using the contracts comes at a cost though: Gas. On the Ethereum blockchain you pay a fee for every transation so that it can be validated by the validator nodes in the network. I developed and tested the contracts using the Goerli testnet. I gathered some GoerliETH from various faucets and saved it to my MetaMask wallet to test my contracts.",
          "classes": "col-lg-10 offset-lg-1"
        },
        {
          "type": "Image",
          "src": "/images/solidiwise_delete_expense.jpg",
          "alt": "A screenshot of the UI used to delete an expense from your expense list",
          "caption": "A screenshot of the UI used to delete an expense from your expense list"
        },
        {
          "type": "Quote",
          "children": "It has been exciting to see how smart contracts on Ethereum work. Connecting the contracts with the frontend application felt like putting all pieces together.",
          "classes": "col-lg-10 offset-lg-1"
        },
        {
          "type": "Text",
          "text": "To do some serious testing I wrote unit tests using the Mocha test framework. Then, there needed to be a way to show the user all the data that was stored in the contracts. I therefore built a simple React app that listens to events sent by the contracts and updates the UI accordingly.",
          "classes": "col-lg-10 offset-lg-1"
        }
      ]
    }
  ]
}
